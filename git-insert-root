#!/bin/sh

help() {
    cat <<"EOF"
Usage: $0 [-h] [-b <branch>] [-m <message>|-e] [<file>...]
  Create a new commit and insert it as a root commit of the current branch.

Options:
  -h            Show this help message.
  -b <branch>   Leave a branch including a single root commit.
  -m <message>  A commit message for the root commit to be inserted.
  -e            Leave "empty" commit message.
  <file>...     Optional files added to the root commit.  The root commit
                will be an empty commit if you specifies nothing.
EOF
    exit $1
}

parse_argument() {
    case "$1" in
    --*)
        echo "${1#*=}"
        return 1
        ;;
    *)
        echo "$2"
        return 2
        ;;
    esac
}

parsing=1
while [ $parsing = 1 ] && [ -n "$1" ]; do
    case "$1" in
    -h|--help)
        help
        ;;
    -b|--branch=*)
        new_branch=$(parse_argument "$1" "$2"); shift $?
        ;;
    -m|--message=*)
        message=$(parse_argument "$1" "$2"); shift $?
        ;;
    -e|--empty)
        message='empty'; shift
        ;;
    --)
        shift; parsing=0
        ;;
    *)
        parsing=0
        ;;
    esac
done

for p in "$@"; do
    [ -e "$p" ] || {
        echo "No such file or directory '$p'" >&2
        exit 1
    }
done

no_changes() {
    git diff-index --quiet --cached HEAD --ignore-submodules -- &&
    git diff-files --quiet --ignore-submodules &&
    test -z "$(git ls-files -o)" && return 0
    return 1
}

prepare() {
    for p in "$@"; do
        git add -- "$p"
    done

    no_changes || {
        git stash save -a
        stash_saved=1
        for p in "$@"; do
            git checkout stash@{0} -- "$p"
        done
    }

    git reset
}

create_root_branch() {
    git checkout --orphan "$1"; shift
    git rm --cached -rq .
    for p in "$@"; do
        [ -e "$p" ] && git add -- "$p"
    done
    git clean -fd
}

create_root_commit() {
    [ -n "$1" ] && {
        git commit --allow-empty -m "$1" || return 1
    } || {
        git commit --allow-empty || return 1
    }
}

current_branch=$(git rev-parse --abbrev-ref HEAD)

[ -z "$new_branch" ] && {
    delete_branch=1
    new_branch="$current_branch"
    while git branch --list | grep "$new_branch" >/dev/null >&2; do
        new_branch="x$new_branch"
    done
}

prepare "$@" || exit 1
create_root_branch "$new_branch" "$@"
create_root_commit "$message" && {
    # make command to add files to index
    head=$(git rev-parse HEAD)
    for p in "$@"; do
        [ -e "$p" ] && {
            filter=$(git ls-tree -r "$head" "$p" | cut -d ' ' -f 1,3 |
                while read mode_blob_path; do
                    mode_blob=$(echo "$mode_blob_path" | cut -f 1)
                    path=$(echo "$mode_blob_path" | cut -f 2)
                    echo -n " --cacheinfo $mode_blob '$path'"
                done; echo)
            [ -z "$index_filter" ] && {
                index_filter='git update-index --add'
            }
            index_filter="$index_filter $filter"
        }
    done

    # make the new commit a root commit of $current_branch
    # the idea is taken from:
    # - http://stackoverflow.com/a/15706715
    # - http://stackoverflow.com/a/3898842
    sha=$(git rev-parse HEAD)
    git filter-branch -f \
        --parent-filter "sed 's/^\$/-p $sha/'" \
        --index-filter "$index_filter" \
        --tag-name-filter cat \
        "$current_branch"
}

# cleanup
git checkout "$current_branch"
[ -n "$stash_saved" ] && git stash pop
[ -n "$delete_branch" ] && git branch -D "$new_branch"
